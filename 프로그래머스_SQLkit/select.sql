-- 코드를 입력하세요
SELECT MEMBER_ID, MEMBER_NAME, GENDER, 
    DATE_FORMAT(DATE_OF_BIRTH, '%Y-%m-%d') DATE_OF_BIRTH
    FROM MEMBER_PROFILE
    WHERE MONTH(DATE_OF_BIRTH) = 3
        AND TLNO IS NOT NULL
        AND GENDER = 'W' ORDER BY MEMBER_ID ASC;

-- 서울에 위치한 식당 목록 출력하기
SELECT I.REST_ID REST_ID,REST_NAME,FOOD_TYPE,FAVORITES,ADDRESS,ROUND(AVG(REVIEW_SCORE),2) SCORE
    FROM REST_INFO I JOIN REST_REVIEW R ON I.REST_ID=R.REST_ID
    WHERE ADDRESS LIKE '서울%'
    GROUP BY I.REST_ID
    ORDER BY SCORE DESC,FAVORITES DESC;

-- 재구매가 일어난 상품과 회원 리스트 구하기
SELECT USER_ID,PRODUCT_ID
FROM ONLINE_SALE
GROUP BY USER_ID,PRODUCT_ID
HAVING COUNT(ONLINE_SALE_ID) > 1
ORDER BY USER_ID,PRODUCT_ID DESC;


-- 오프라인/온라인 판매 데이터 통합하기
SELECT DATE_FORMAT(N.SALES_DATE,'%Y-%m-%d') AS SALES_DATE
    ,PRODUCT_ID,USER_ID,SALES_AMOUNT
    FROM ONLINE_SALE N
    WHERE SALES_DATE LIKE '2022-03-%'
UNION 
SELECT DATE_FORMAT(F.SALES_DATE,'%Y-%m-%d') AS SALES_DATE
    ,PRODUCT_ID,NULL as USER_ID,SALES_AMOUNT
    FROM OFFLINE_SALE F
    WHERE SALES_DATE LIKE '2022-03-%'
ORDER BY SALES_DATE,PRODUCT_ID,USER_ID

-- 특정 물고기를 잡은 총 수 구하기
/*
FISH_INFO 테이블에서 잡은 BASS와 SNAPPER의 수를 출력
*/
SELECT COUNT(*) FISH_COUNT
FROM FISH_INFO
INNER JOIN FISH_NAME_INFO ON
    FISH_INFO.FISH_TYPE = FISH_NAME_INFO.FISH_TYPE
AND FISH_NAME_INFO.FISH_NAME IN ('BASS','SNAPPER')

-- 대장균들의 자식의 수 구하기
/*
ID가 PARENT_ID 가리킴
같은 PARENT_ID를 가진 ID들 COUNT
*/
SELECT ID, IFNULL(CHILD_COUNT, 0) CHILD_COUNT FROM ECOLI_DATA
LEFT OUTER JOIN
(SELECT COUNT(*) CHILD_COUNT, PARENT_ID
FROM ECOLI_DATA
GROUP BY PARENT_ID) C
ON C.PARENT_ID=ECOLI_DATA.ID
ORDER BY ID

-- 대장균의 크기에 따라 분류하기 1
/*
100이하 -> LOW
1000 이하 -> MEDIUM
그 외 -> HIGH
*/
SELECT ID, (CASE WHEN SIZE_OF_COLONY <=100 THEN 'LOW'
 WHEN SIZE_OF_COLONY <=1000 THEN 'MEDIUM'
ELSE 'HIGH'
END) SIZE FROM ECOLI_DATA
ORDER BY ID


-- 대장균의 크기에 따라 분류하기 2
/*
크기 내림차순 정리,
상위 0~25% CRITICAL
26~50% HIGH
51~75% MEDIUM
76~100% LOW
*/
SELECT B.ID, (
    CASE WHEN B.RN/C.CNT<=0.25 THEN 'CRITICAL'
    WHEN B.RN/C.CNT<=0.5 THEN 'HIGH'
    WHEN B.RN/C.CNT<=0.75 THEN 'MEDIUM'
    ELSE 'LOW'
    END
) COLONY_NAME
FROM (SELECT COUNT(*) CNT FROM ECOLI_DATA) C,
    (SELECT ROW_NUMBER() OVER (ORDER BY SIZE_OF_COLONY DESC) AS RN, -- MySQL ROW_NUMER() OVER (ORDER BY ~) 외우기!!!!!!!!!
    ID FROM ECOLI_DATA) B
ORDER BY ID


-- 물고기 종류 별 대어 찾기

SELECT ID, L.FISH_NAME, L.LENGTH FROM
    (SELECT FISH_NAME, MAX(LENGTH) LENGTH
    FROM FISH_INFO LEFT JOIN FISH_NAME_INFO
        ON FISH_INFO.FISH_TYPE = FISH_NAME_INFO.FISH_TYPE
    GROUP BY FISH_NAME) L,
    (SELECT ID, FISH_NAME, LENGTH
    FROM FISH_INFO INNER JOIN FISH_NAME_INFO
        ON FISH_INFO.FISH_TYPE = FISH_NAME_INFO.FISH_TYPE) IDNAME
WHERE L.FISH_NAME = IDNAME.FISH_NAME AND L.LENGTH = IDNAME.LENGTH
ORDER BY ID

/* JOIN, ON, 서브쿼리 사용 HAVING에서 구한 MAX LENGTH 바깥에서 쓸 수 있음 */
SELECT ID, FISH_NAME, FISH_INFO.LENGTH AS LENGTH
FROM FISH_INFO JOIN FISH_NAME_INFO ON FISH_INFO.FISH_TYPE = FISH_NAME_INFO.FISH_TYPE
WHERE FISH_INFO.FISH_TYPE IN 
(
    SELECT FISH_TYPE
    FROM FISH_INFO
    GROUP BY FISH_TYPE
    HAVING LENGTH = MAX(LENGTH)
)
ORDER BY ID