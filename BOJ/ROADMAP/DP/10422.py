# 괄호
'''
s가 올바른 괄호 문자열이면, (s)도 그러함
t도 그러하면, st도 그러함
(()())() 올바르지만, (()는 그렇기 않음

길이가 L(1~5000)인 서로 다른 올바른 괄호 문자열 개수를
1,000,000,007로 나눈 나머지를 출력
dp[i]: 괄호문자열i개 썼을 때, 올바른 괄호의 수
'''
from sys import stdin
input = stdin.readline
dp = [0]*5001
dp[0] = 1 # 빈 문자열은 올바른 괄호 문자열로 간주
# j 위치에 새로운 괄호 ) 추가
# # j왼쪽에는 올바른 괄호쌍을 만들 수 있는 j-2 괄호 문자열이 존재 
# #   -> 얘네의 맨 앞[0]에 j에 대한 ( 추가해줘야 함
# # j오른쪽에는 올바른 괄호쌍을 만들 수 있는 i-j 괄호 문자열이 존재
# ( 끼워놓고, )는 알아서 맞는 괄호쌍 만들며 닫힐 것
# dp[2]=1, dp[4]=2
# (())
# ()()

# dp[0]까지 완성했다치고(dp[0]*), [0]에 ( 끼워넣을 것. 오른쪽 부분 현재 새로 추가한 2빼고, [4] 갖고옴
# /(()())
# /((()))
# [1]까지 왼쪽 완성했다치고(dp[2]*), [2]에 ( 끼워넣을 것. 오른쪽 부분 새로 추가한 2빼고, [2] 갖고옴
# ()/(())
# [3]까지 왼쪽 완성했다치고(dp[4]*), [4]에 ( 끼워넣을 것 -> () 추가.
# ()()/()
# (())/()

for i in range(2, 5001, 2):
    for j in range(0, i-1, 2): # i-2까지 오기 위한 구간들
        dp[i] += (dp[j] * dp[i-j-2])
    dp[i] %= 1000000007

for i in range(int(input())):
    print(dp[int(input())])

# import sys
# input = sys.stdin.readline

# dp = [0] * 5001
# dp[0] = 1 # 빈문자열도 옳은 괄호로 취급
# # 전체 i길이 괄호 문자열이 있을 때
# # j 위치에 새로운 괄호 ) 추가
# # 여는 괄호는 j왼쪽 어딘가에 잘 추가할 것
# # j왼쪽에는 올바른 괄호쌍을 만들 수 있는 j-2 괄호 문자열이 존재 
# #   -> 얘네의 맨 앞[0]에 j에 대한 ( 추가해줘야 함
# # j오른쪽에는 올바른 괄호쌍을 만들 수 있는 i-j 괄호 문자열이 존재
# for i in range(2, 5001, 2):
#     for j in range(2, i + 1, 2):
#         dp[i] += (dp[j-2] * dp[i-j]) 
#     dp[i] %= 1000000007

# for _ in range(int(input())):
#     print(dp[int(input())])